{"version":3,"sources":["App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["btnMap","executeOperation","operand1","operator","operand2","Error","store","createStore","state","display","action","isFirst","operand","type","length","number","newState","result","parseFloat","toString","indexOfDecimal","indexOf","handleClick","event","id","target","value","isNaN","dispatch","parseInt","btns","btnId","btn","className","onClick","push","ConnectedCalculator","connect","substring","props","App","counterSlice","createSlice","name","initialState","reducers","increment","decrement","incrementByAmount","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7892a78.chunk.js","sourcesContent":["import React from 'react';\nimport {createStore} from 'redux';\nimport {Provider, connect} from 'react-redux';\nimport './App.scss';\n\nconst btnMap = {\n  \"clear\": \"AC\",\n  \"add\": \"+\",\n  \"subtract\": \"-\",\n  \"multiply\": \"*\",\n  \"divide\": \"/\",\n  \"one\": \"1\",\n  \"two\": \"2\",\n  \"three\": \"3\",\n  \"four\": \"4\",\n  \"five\": \"5\",\n  \"six\": \"6\",\n  \"seven\": \"7\",\n  \"eight\": \"8\",\n  \"nine\": \"9\",\n  \"zero\": \"0\",\n  \"decimal\": \".\",\n  \"equals\": \"=\"\n};\n\nconst INPUT_NUMBER = \"INPUT NUMBER\";\nconst INPUT_OPERATOR = \"INPUT OPERATOR\";\nconst INPUT_DECIMAL = \"INPUT_DECIMAL\";\nconst CALCULATE = \"CALCULATE\";\nconst CLEAR = \"CLEAR\";\n\nconst inputNumber = number => ({type: INPUT_NUMBER, number});\nconst inputOperator = operator => ({type: INPUT_OPERATOR, operator});\nconst inputDecimal = () => ({type: INPUT_DECIMAL});\nconst calculate = () => ({type: CALCULATE});\nconst clear = () => ({type: CLEAR});\n\nconst reducer = (state = {\n  operand1: \"0\",\n  operator: null,\n  operand2: null,\n  display: \"0\"\n}, action) => {\n  let isFirst = true;\n  let operand = \"0\";\n  let operand2 = state.operand2;\n  switch (action.type) {\n    case INPUT_NUMBER:\n      isFirst = (state.operator == null);\n      if (!isFirst && state.operand2 == null) {\n        state.operand2 = \"0\";\n      } else if (isFirst && state.operand1 == null) {\n        state.operand1 = \"0\";\n      }\n      operand = isFirst ? state.operand1 : state.operand2;\n\n      if (operand.length >= 17) return state;\n\n      if (operand === \"0\") {\n        operand = \"\";\n      } else if (operand === \"-0\") {\n        operand = \"-\";\n      }\n      operand += action.number;\n      const newState = {operator: state.operator};\n      if (isFirst) {\n        newState.operand1 = operand;\n        newState.operand2 = state.operand2;\n        newState.display = operand;\n      } else {\n        newState.operand1 = state.operand1;\n        newState.operand2 = operand;\n        newState.display = operand;\n      }\n      return newState;\n    case INPUT_OPERATOR:\n      if (action.operator === \"subtract\") {\n          if (state.operand1 == null) {\n            return {operand1: \"-0\", operator: null, operand2: null, display: \"-\"};\n          } else if (state.operator != null && state.operand2 == null) {\n            return {operand1: state.operand1, operator: state.operator, operand2: \"-0\", display: \"-\"}\n          } else if (state.operator == null && state.operand1 === \"-0\") {\n            return state;\n          } else if (state.operand2 === \"-0\") {\n            return state;\n          }\n      }\n\n      operand2 = (state.operand2 === \"-0\") ? null : state.operand2;\n\n      if (state.operator != null && operand2 != null) {\n        const result = executeOperation(parseFloat(state.operand1), state.operator, parseFloat(operand2));\n        return {operand1: result, operator: action.operator, operand2: null, display: result.toString()};\n      } else if (state.operand1 != null) {\n        return {operand1: state.operand1, operator: action.operator, operand2: null, display: state.display};\n      } else {\n        return {operand1: state.display, operator: action.operator, operand2: null, display: state.display};\n      }\n    case INPUT_DECIMAL:\n      isFirst = (state.operand2 == null && state.operator == null);\n      operand = (isFirst) ? state.operand1 : state.operand2;\n      if (operand == null) {\n        operand = \"0\";\n      }\n      const indexOfDecimal = operand.indexOf(\".\");\n      if (indexOfDecimal === -1 && operand.length < 17) {\n        operand += \".\";\n        if (isFirst) {\n          return {operand1: operand, operator: state.operator, operand2: state.operand2, display: operand};\n        } else {\n          return {operand1: state.operand1, operator: state.operator, operand2: operand, display: operand};\n        }\n      } else {\n        return state;\n      }\n    case CALCULATE:\n      if (state.operator == null) {\n        return state;\n      }\n      if (state.operand2 == null) {\n        operand2 = state.operand1;\n      } else {\n        operand2 = state.operand2;\n      }\n      const result = executeOperation(parseFloat(state.operand1), state.operator, parseFloat(operand2));\n      return {operand1: null, operator: null, operand2: null, display: result.toString()};\n    case CLEAR:\n      return {operand1: \"0\", operator: null, operand2: null, display: \"0\"};\n    default:\n      return state;\n  }\n}\n\nfunction executeOperation(operand1, operator, operand2) {\n  switch (operator) {\n    case \"add\":\n      return operand1 + operand2;\n    case \"subtract\":\n      return operand1 - operand2;\n    case \"multiply\":\n      return operand1 * operand2;\n    case \"divide\":\n      return operand1 / operand2;\n    default:\n      throw new Error(\"Can not execute operation without operator\");\n  }\n}\n\nconst store = createStore(reducer);\n\nfunction handleClick(event) {\n  const id = event.target.id;\n  const value = btnMap[id];\n  if (isNaN(value)) {\n    if (id === \"add\" || id === \"subtract\" || id === \"multiply\" || id === \"divide\") {\n      store.dispatch(inputOperator(id));\n    } else if (id === \"decimal\") {\n      store.dispatch(inputDecimal());\n    } else if (id === \"equals\") {\n      store.dispatch(calculate());\n    } else if (id === \"clear\") {\n      store.dispatch(clear());\n    }\n  } else {\n    store.dispatch(inputNumber(parseInt(value)));\n  }\n}\n\nconst btns = [];\nfor (let btnId in btnMap) {\n  const btn = <button id={btnId} className=\"calc-btn\" onClick={handleClick}>\n    {btnMap[btnId]}</button>;\n  btns.push(btn);\n}\n\nfunction Calculator(props) {\n  return (<div className=\"calculator\">\n    <div id=\"display\">\n      <span>{props.display}</span>\n    </div>\n    {btns}\n  </div>);\n}\n\nconst mapStateToProps = state => {\n  const length = (state.display.length > 17) ? 17 : state.display.length;\n  return {display: state.display.toString().substring(0, length)};\n};\nconst ConnectedCalculator = connect(mapStateToProps, null)(Calculator);\n\nfunction App() {\n  return (<Provider store={store}>\n    <ConnectedCalculator/>\n  </Provider>);\n}\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}